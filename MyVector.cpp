#include <iostream>
#include <cstdlib>

using namespace std;

////////////////////////////////////////////////////////////////////////////////
// MyVector Class
////////////////////////////////////////////////////////////////////////////////

template <typename T>
class MyVector
{
public:

    MyVector();

    inline size_t size() const
    {
        return __sizeNum;
    }

    inline size_t capacity() const
    {
        return __capNum;
    }

    void push_back(const T &pushData);
    T &operator[](size_t idx);

    ~MyVector();


private:

    T *__headPtr;
    size_t __sizeNum, __capNum;
};


////////////////////////////////////////////////////////////////////////////////
// Constructor
////////////////////////////////////////////////////////////////////////////////

template <typename T>
MyVector<T>::MyVector(): __headPtr(nullptr), __sizeNum(0), __capNum(0) {}


////////////////////////////////////////////////////////////////////////////////
// push_back
////////////////////////////////////////////////////////////////////////////////

template <typename T>
void MyVector<T>::push_back(const T &pushData)
{
    if (__sizeNum == __capNum)
    {
        __capNum = 2 * __capNum + 1;
        __headPtr = static_cast<T *> (realloc(__headPtr, sizeof(T) * 2 * __capNum + 1));
    }

    __headPtr[__sizeNum++] = pushData;
}


////////////////////////////////////////////////////////////////////////////////
// operator[]
////////////////////////////////////////////////////////////////////////////////

template <typename T>
T &MyVector<T>::operator[](size_t idx)
{
    return __headPtr[idx];
}


////////////////////////////////////////////////////////////////////////////////
// Destructor
////////////////////////////////////////////////////////////////////////////////

template <typename T>
MyVector<T>::~MyVector()
{
    free(__headPtr);
}


////////////////////////////////////////////////////////////////////////////////
// Main Program Define
////////////////////////////////////////////////////////////////////////////////

int main()
{
    MyVector<int> vectorObj;

    for (int i = 0; i < 20; i++)
    {
        vectorObj.push_back(i);
        printf("Size: %d, Capacity: %d\n", vectorObj.size(), vectorObj.capacity());
    }
}